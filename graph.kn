+class Graph()
	+var posX: float
	+var posY: float
	+var width: float
	+var height: float
	+var labelFont: draw@Font
	+var varFont: draw@Font
	+var fontColor: int
	+var labelX: []char
	+var labelY: []char
	+var labelSize: float
	+var axisColor: int
	
	*func ctor()
		do me.posX :: 50.0
		do me.posY :: 50.0
		do me.width :: 400.0
		do me.height :: 300.0
		do me.labelFont :: draw@makeFont(null, 12, false, false, true, 0.0)
		do me.varFont :: draw@makeFont(null, 12, false, false, true, 0.0)
		do me.fontColor :: draw@black
		do me.labelX :: ""
		do me.labelY :: ""
		do me.labelSize :: 55.0
		do me.axisColor :: draw@black
	end func
	
	+func setPos(posX: float, posY: float, width: float, height: float)
		do me.posX :: posX
		do me.posY :: posY
		do me.width :: width
		do me.height :: height
	end func
	
	func drawAxis(minX: float, maxX: float, minY: float, maxY: float) {軸の描画}
		do draw@line(me.posX + me.labelSize, me.posY, me.posX + me.labelSize, me.posY + me.height - me.labelSize, me.axisColor)
		do draw@line(me.posX + me.labelSize, me.posY, me.posX + me.width, me.posY, me.axisColor)
		do draw@line(me.posX + me.width, me.posY + me.height - me.labelSize, me.posX + me.labelSize, me.posY + me.height - me.labelSize, me.axisColor)
		do draw@line(me.posX + me.width, me.posY + me.height - me.labelSize, me.posX + me.width, me.posY, me.axisColor)
		do me.drawScale(minX, maxX, minY, maxY)
	end func
	
	func drawScale(minX: float, maxX: float, minY: float, maxY: float) {目盛りの表示}
		var scaleX: []float :: me.autoScale(minX, maxX)
		var scaleMinX: float :: scaleX[0]
		var scaleMaxX: float :: scaleX[1]
		var intervalX: float :: scaleX[2]
		var nX: int :: scaleX[3] $ int
		var drawBaseX: float :: me.posX + me.labelSize
		var drawScaleX: float :: (me.width - me.labelSize) / (scaleMaxX - scaleMinX)
		for i(0, nX)
			do me.varFont.draw(intervalX * i $ float * drawScaleX + drawBaseX, me.posY + me.height - me.labelSize, (scaleMinX + intervalX * i $ float).toStr(), me.axisColor)
		end for
	end func
	
	{目盛りの計算}
	func autoScale(min: float, max: float): []float {[0]:目盛りの最小値,[1]:目盛りの最大値,[2]:目盛りの間隔,[3]:分割数}
		var interval: float :: (max - min) / 5.0 {間隔の目安}
		var shift: int :: 0
		{間隔を1以上の数にする}
		while(interval < 1.0)
			do interval :* 10.0
			do shift :+ 1
		end while
		{間隔をキリの良い数字にする}
		var intervalInt: int :: lib@round(interval, 0) $ int
		{
		TODO:ここに5づつ，2づつ，1づつになるように場合分け
		}
		do interval :: intervalInt $ float * 10.0 ^ (-shift $ float)
		
		var scaleMax: float :: interval * lib@ceil(max / interval)
		var nextScale: float :: scaleMax - interval
		var n: int :: lib@ceil((scaleMax - min) / interval) $ int {軸の分割数}
		var scaleMin: float :: scaleMax - interval * n $ float
		ret[scaleMin, scaleMax, interval, n $ float]
	end func
	
	func drawLabel() {TODO:縦軸のラベルの表示}
		do me.labelFont.draw(me.posX + me.labelSize + (me.width - me.labelSize) / 2.0 - (^me.labelX) $ float * 5.0, me.posY + me.height - 0.65 * me.labelSize, me.labelX, me.fontColor)
	end func
	
	+func plot(x: []float, y: []float, color: int) {折れ線グラフ}
		var n: int :: ^y
		var scaleX: []float :: me.autoScale(x.min(), x.max())
		var minX: float :: scaleX[0]
		var maxX: float :: scaleX[1]
		var minY: float :: y.min()
		var maxY: float :: y.max()
		do me.drawAxis(minX, maxX, minY, maxY)
		do me.drawLabel()
		var baseX: float :: me.posX + me.labelSize
		var baseY: float :: me.posY + me.height - me.labelSize
		var magnifyX: float :: (me.width - me.labelSize) / (maxX - minX)
		var magnifyY: float :: (me.height - me.labelSize) / (maxY - minY)
		for i(0, n - 2)
			do draw@line(x[i] * magnifyX - minX * magnifyX + baseX, -y[i] * magnifyY + minY * magnifyY + baseY, x[i + 1] * magnifyX - minX * magnifyX + baseX, -y[i + 1] * magnifyY + minY * magnifyY + baseY, color)
		end for
	end func
	
	+func scatterPlot(x: []float, y: []float, size: float, color: int) {散布図}
		var n: int :: ^y
		var scaleX: []float :: me.autoScale(x.min(), x.max())
		var minX: float :: scaleX[0]
		var maxX: float :: scaleX[1]
		var maxY: float :: y.max()
		var minY: float :: y.min()
		do me.drawAxis(minX, maxX, minY, maxY)
		do me.drawLabel()
		var baseX: float :: me.posX + me.labelSize
		var baseY: float :: me.posY + me.height - me.labelSize
		var magnifyX: float :: (me.width - me.labelSize) / (maxX - minX)
		var magnifyY: float :: (me.height - me.labelSize) / (maxY - minY)
		for i(0, n - 1)
			do draw@circle(x[i] * magnifyX - minX * magnifyX + baseX, -y[i] * magnifyY + minY * magnifyY + baseY, size, size, color)
		end for
	end func
	
	+func barChart(label: [][]char, value: float, color: int) {棒グラフ}
		
	end func
	
	+func circleChart(label: [][]char, value: []float, color: []int) {円グラフ}
		
	end func
end class
